import time
import random
import RPi.GPIO as GPIO
from ultralytics import YOLO
from picamera2 import Picamera2
import cv2
import numpy as np

# --- C·∫§U H√åNH GPIO ---
GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False)

# Ch√¢n ƒëi·ªÅu khi·ªÉn motor (BOARD numbering)
IN1 = 11  # Tr√°i
IN2 = 13
IN3 = 15  # Ph·∫£i
IN4 = 12
ENA = 16  # PWM tr√°i
ENB = 18  # PWM ph·∫£i

motor_pins = [IN1, IN2, IN3, IN4, ENA, ENB]
for pin in motor_pins:
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, GPIO.LOW)

pwmA = GPIO.PWM(ENA, 1000)
pwmB = GPIO.PWM(ENB, 1000)
pwmA.start(100)
pwmB.start(100)

# --- ƒêI·ªÄU KHI·ªÇN ---
def stop_all():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.LOW)

def forward():
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)

def turn_left():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.HIGH)   # Tr√°i l√πi
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)    # Ph·∫£i ti·∫øn

def turn_right():
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)    # Tr√°i ti·∫øn
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.HIGH)   # Ph·∫£i l√πi

# --- TR·∫†NG TH√ÅI V√Ä TIMER ---
is_stopped = False
last_detection_time = 0
stop_cooldown = 3  # gi√¢y ƒë·ªÉ tr√°nh detect li√™n t·ª•c

# --- T·∫¢I MODEL YOLO ---
model = YOLO('/home/toan/xetuhanh/chuyende2_xetuhanh/best.pt')
class_names = model.names

# --- KH·ªûI T·∫†O CAMERA ---
picam2 = Picamera2()
config = picam2.create_preview_configuration(main={"format": 'RGB888', "size": (640, 480)})
picam2.configure(config)
picam2.start()

# --- H√ÄM X·ª¨ L√ù KHI PH√ÅT HI·ªÜN STOP ---
def handle_stop_detection():
    global is_stopped, last_detection_time
    current_time = time.time()
    
    # Ki·ªÉm tra cooldown ƒë·ªÉ tr√°nh x·ª≠ l√Ω li√™n t·ª•c
    if current_time - last_detection_time < stop_cooldown:
        return
    
    print("üõë PH√ÅT HI·ªÜN BI·ªÇN B√ÅO STOP - D·ª™NG XE!")
    stop_all()
    is_stopped = True
    last_detection_time = current_time

# --- V√íNG L·∫∂P CH√çNH ---
try:
    print("üöó B·∫Øt ƒë·∫ßu ch·∫°y xe v√† nh·∫≠n di·ªán bi·ªÉn b√°o...")
    
    while True:
        # Capture frame t·ª´ camera
        frame = picam2.capture_array()
        
        # Chuy·ªÉn ƒë·ªïi t·ª´ 4 k√™nh sang 3 k√™nh n·∫øu c·∫ßn
        if frame.shape[2] == 4:
            frame = cv2.cvtColor(frame, cv2.COLOR_BGRA2BGR)
        elif frame.shape[2] == 3:
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
        
        try:
            # Ch·∫°y YOLO detection
            results = model.predict(source=frame, conf=0.6, iou=0.45, stream=True, verbose=False)
            
            stop_detected = False
            
            # X·ª≠ l√Ω k·∫øt qu·∫£ detection
            for result in results:
                if result.boxes is not None:
                    for box in result.boxes:
                        # L·∫•y th√¥ng tin bounding box
                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                        confidence = float(box.conf[0])
                        cls_id = int(box.cls[0])
                        label = class_names[cls_id].lower()
                        
                        # Ki·ªÉm tra n·∫øu ph√°t hi·ªán bi·ªÉn "stop"
                        if "stop" in label:
                            stop_detected = True
                            
                            # V·∫Ω bounding box m√†u ƒë·ªè cho bi·ªÉn stop
                            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 3)
                            cv2.putText(frame, f"STOP {confidence:.2f}", (x1, y1-10), 
                                      cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                        else:
                            # V·∫Ω bounding box m√†u xanh cho c√°c object kh√°c
                            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                            cv2.putText(frame, f"{label} {confidence:.2f}", (x1, y1-10), 
                                      cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
            
            # X·ª≠ l√Ω khi ph√°t hi·ªán bi·ªÉn stop
            if stop_detected:
                handle_stop_detection()
            elif not is_stopped:
                # N·∫øu kh√¥ng ph√°t hi·ªán stop v√† xe ch∆∞a d·ª´ng th√¨ ti·∫øp t·ª•c ch·∫°y
                forward()
        
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ch·∫°y detection: {e}")
            # Ti·∫øp t·ª•c ch·∫°y xe n·∫øu c√≥ l·ªói detection
            if not is_stopped:
                forward()
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i tr√™n frame
        status_text = "STOPPED" if is_stopped else "RUNNING"
        status_color = (0, 0, 255) if is_stopped else (0, 255, 0)
        cv2.putText(frame, f"Status: {status_text}", (10, 30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 1, status_color, 2)
        
        # Hi·ªÉn th·ªã frame
        cv2.imshow("Traffic Sign Detection", frame)
        
        # Nh·∫•n 'q' ƒë·ªÉ tho√°t, 'r' ƒë·ªÉ reset v√† ch·∫°y l·∫°i
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break
        elif key == ord('r'):
            print("üîÑ Reset - Xe b·∫Øt ƒë·∫ßu ch·∫°y l·∫°i...")
            is_stopped = False
            forward()

except KeyboardInterrupt:
    print("\n‚õî D·ª´ng ch∆∞∆°ng tr√¨nh b·∫±ng Ctrl+C")

finally:
    # D·ªçn d·∫πp t√†i nguy√™n
    print("üßπ D·ªçn d·∫πp t√†i nguy√™n...")
    picam2.stop()
    cv2.destroyAllWindows()
    stop_all()
    pwmA.stop()
    pwmB.stop()
    GPIO.cleanup()
    print("‚úÖ Ho√†n t·∫•t!")